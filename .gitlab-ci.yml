variables:
     DS_DEFAULT_ANALYZERS: "bundler-audit,gemnasium"

include:
    - template: Security/SAST.gitlab-ci.yml

before_script:
    - docker info

stages:
    - build
    - test
    - publish
    - deploy

build:
    stage: build
    script:
        - echo "Building"
        - mvn clean compile

test:
    stage: test
    script:
        - echo "Testing"
        - mvn test verify
    artifacts:
        reports:
            junit:
                - target/surefire-reports/TEST-*.xml
                - target/failsafe-reports/TEST-*.xml
                
dependency_scanning:
    stage: test
    image: docker:stable
    variables:
        DOCKER_DRIVER: overlay2
    allow_failure: true
    services:
        - docker:stable-dind
    script:
        - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
        - docker run
            --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
            --volume "$PWD:/code"
            --volume /var/run/docker.sock:/var/run/docker.sock
            "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
    artifacts:
        paths: [gl-dependency-scanning-report.json]

security-analysis:
    stage: test
    image: docker:stable
    variables:
        DOCKER_DRIVER: overlay2
    allow_failure: true
    services:
        - docker:stable-dind
    script:
        - export SAST_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
        - chmod +x ./mvnw
        - docker run 
            --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}" 
            --env SAST_DISABLE_REMOTE_CHECKS="${SAST_DISABLE_REMOTE_CHECKS:-false}" 
            --volume "$PWD:/code" 
            --volume /var/run/docker.sock:/var/run/docker.sock 
            "registry.gitlab.com/gitlab-org/security-products/sast:$SAST_VERSION" /app/bin/run /code
    artifacts:
        paths: [gl-sast-report.json]

codequality:
    stage: test
    script:
        - echo "Code Quality Test"
        - mvn clean package sonar:sonar -Dsonar.host.url=http://192.168.28.24:9000 -Dsonar.projectName="usermanagement-development"
        
publish:
    stage: publish
    only:
        - master
    script:
        - echo "Publishing docker image"
        - mvn package
        - docker build -t hr-usermanagement-service -f ./Dockerfile.dockerfile .
        - docker tag hr-usermanagement-service:latest $docker_username/hr-management:hr-usermanagement-service
        - echo "$docker_password" | docker login --username $docker_username --password-stdin
        - docker push rspanjers/hr-management:hr-usermanagement-service

deploy:
    stage: deploy
    only:
        - master
    script:
        # Set image name as a variable
        - set IMAGE_NAME=$docker_username/hr-management:hr-usermanagement-service
        # download & install latest kubectl release
        - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        - chmod +x ./kubectl
        - mv ./kubectl /usr/local/bin/kubectl
        # Deploy to kubernetes
        - kubectl set image deployment/hr-usermanagement-service hr-usermanagement-service=$docker_username/hr-management:hr-usermanagement-service --kubeconfig=$KUBECONFIG

       
after_script:
    - echo "End CI/CD"
